#
# In the ARGoS window, you can move the camera with the following commands:
#
# - Translation: W A S D Q E keys, right-click + drag
# - Rotation: left-click + drag
#
# Selection: shift-click on the robot
# Remove selection: shift-click elsewhere
#
# Bug: selection is finnicky in the top-down view (Camera 1).
# Solution: switch to another camera and it'll work.
#

#
# Compiling and running the code
#
# - In the ARGoS window: Pause the simulation (if it's not paused already)
# - In the editor: do what you need, save, press the "Execute" button
# - In the ARGoS window: Press the "Play", "Step", or "Fast Forward" buttons
#

#
# This editor sucks.
#
# I know.
#
# But when it's open, it detects whether the open files have been modified elsewhere.
# So open this editor and then open the file you wanna edit in your favorite editor.
# When you save in your editor, the changes will be reflected here. Press Execute to compile and run.
# If you want syntax highlighting, JavaScript is pretty similar to Buzz.
#

function init() {
	reset()
}

# 600 steps till circle created with 10 tics/s
function step() {

	## Find neighbor in front (successor) and behind (predecessor) a robot
	if (fault_detected == 0) {
		step_movement()
		get_neighbors()
	}
	else {
		set_wheels(0.0, 0.0)
	}

	#log(id, ": ",close_neighbors)

	if (step_counter > fault_step) {
		if (id == RandomID)
			log(size(close_neighbors))
		if (size(close_neighbors) == 0){ # or (size(close_neighbors) == 1 and close_neighbors["front"] == nil)) { # we faulted
			if (id == RandomID)
				log("Setting robot as faulty")
			
			neighbors.broadcast("fault", rid)
			self_faulty = 1
			fault_detected = 1
			set_leds(255, 0, 0)
		}
	}

	#neighbors.broadcast(string.tostring(close_neighbors["front"]["rid"]), {})
	#neighbors.broadcast(string.tostring(close_neighbors["rear"]["rid"]), {})
}

function step_movement() {
	## Is there a neghbor in front of you
	if (proximity[0].value > 0.0){
		S = 1
	}
	else {
		S = 0
	}
	
	## Inducing fault after fault_steps
	if ((id == RandomID) and (step_counter > fault_step)){
		set_leds(0, 0, 255)
		#type of fault
		set_wheels(float(fault_left_wheel), float(fault_right_wheel))
		#set_wheels(-3.0, 9.0)
	}
	else {
		## Normal operation based on S value
		set_leds(0, 255, 0)
		if (S == 1) {
			set_wheels(3.0,9.0)
		}
		else {
			set_wheels(9.0,1.0)
		}
	}

	step_counter = step_counter + 1
}

function reset() {
	math.rng.setseed(id)
	S = 0
	step_counter = 0
	fault_detected = 0
	self_faulty = 0
	fault_step = 600

	azim_range = 30
	dist_range = 40

	acknowledgement_packet = {
		.from = 0
	}

	fault_id = RandomID

	#neighbors.listen(string.tostring(id),
	#	function(vid, value, rid) {
	#		log("Got message from ", rid, ". Do something")
	#	}
	#)
	### The robot that sends message on this channel is indicating it is faulty
	neighbors.listen("fault",
		function(vid, value, rid) {
			if (fault_detected == 0) {
				neighbors.broadcast("fault", rid)
				fault_detected = 1
			}
		}
	)

	set_leds(0, 255, 0)
}

function destroy() {
}


function get_neighbors(){
	close_neighbors = {}
	min_front_range = dist_range
	min_rear_range = dist_range
	neighbors.foreach(
		function(rid, data) {
			if ((data.azimuth > -azim_range*((math.pi)/180)) and (data.azimuth < azim_range*((math.pi)/180)) and (data.distance < min_front_range)){
				#min_front_range = data.distance
				neighbor = {
					.data=data,
					.rid=rid
				}
				close_neighbors["front"] = neighbor
			}
			else if ((data.azimuth < ((-180 + azim_range)*((math.pi)/180)) or (data.azimuth > (180 - azim_range)*((math.pi)/180))) and (data.distance < min_rear_range)) {
				#min_rear_range = data.distance
				neighbor = {
					.data=data,
					.rid=rid
				}
				close_neighbors["rear"] = neighbor
			}
		}
	)
}